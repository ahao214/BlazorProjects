@page "/cart"
@inject ICartService _cartService


<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <button class="btn-delete" @onclick="@(() => RemoveProductFromCart(product.ProductId,product.ProductTypeId))">Delete</button>
                    
                </div>
                <div class="cart-product-price">$@product.Price</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count):$@cartProducts.Sum(product=>@product.Price)
        </div>
    </div>
}

@code {

    // 购物车中的商品信息
    List<CartProductResponse> cartProducts = null;
    // 页面提示内容
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
       await LoadCart();
    }

    //从购物车中移除商品   
    private async Task RemoveProductFromCart(int productId,int productTypeId)
    {
        await _cartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if ((await _cartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await _cartService.GetCartProducts();
        }
    }

}
